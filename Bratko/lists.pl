/*
Глава 3.
Списки

Увлечения1 = [теннис, музыка],
Увлечения2 = [лыжи, еда],
Увлечения3 = [энн, Увлечения1, том, Увлечения2].

*/

принадлежит(X,[X|L]).

принадлежит(X,[Y|L]):-
    принадлежит(X,L).


конк([],L,L).
конк([H|L1],L2,[H|L3]):-
    конк(L1,L2,L3).

/*
X принадлежит L, если список L можно разбить на два списка таким образом,
чтобы элемент X являлся головой второго из них.
*/
принадлежит1(X,L):-
    конк(_,[X|_],L).

/*
3.1.(а) Используя отношение конк, напишите цель,
соответствующую вычеркиванию трех последних элементов списка L,
результат — новый список L1. 
Указание: L — конкатенация L1 и трехэлементного списка.
*/
вычеркнуть3(L1, L):-
    конк(L,[_,_,_],L1).

/*
3.2. Определите отношение

последний( Элемент, Список)

так, чтобы Элемент являлся последним элементом списка Список.
Напишите два варианта определения: 
(а) с использованием отношения конк,
(b) без использования этого отношения.
*/

последний_а(X,L):-
    конк(_,[X],L).

последний_б(X,[X]).
последний_б(X,[H|L]):-
    последний_б(X,L).


/*
3.2.3. Добавление элемента
Наиболее простой способ добавить элемент в список — это вставить его в самое начало так,
чтобы он стал его новой головой.
Если X — это новый элемент, а список, в который X добавляется — L,
тогда результирующий список — это просто

[X | L]
*/

добавить(X,L,[X|L]).

/*
3.2.4. Удаление элемента
*/

удалить(X,[X|L],L).
удалить(X,[Y|L],[Y|L1]):-
    удалить(X,L,L1).

принадлежит2(X,L):-
    удалить(X,L,_).

/*
3.2.5. Подсписок
*/
подсписок(S,L):-
    конк(L1,L2,L),
    конк(S,L3,L2).


/*
3.2.6. Перестановки
*/

перестановка([],[]).
перестановка([H|T],L):-
    перестановка(T,L1),
    внести(H,L1,L).


внести(X, L, BigL):-
    удалить(X,BigL,L).

/*
3.3. Определите два предиката
четнаядлина( Список) и нечетнаядлина( Список)
таким образом, чтобы они были истинными,
если их аргументом является список четной или нечетной длины соответственно.
Например, список [а, b, с, d] имеет четную длину, a [a, b, c] — нечетную.
*/

четнаядлина(L):-
    четнаядлина(L,X),
    (X mod 2) =:= 0. 

четнаядлина([],0).

четнаядлина([H|L],X):-
    четнаядлина(L,X1),
    X is X1 +1.

нечетнаядлина(L):-
    \+(четнаядлина(L)).

/*
3.4. Определите отношение

обращение( Список, ОбращенныйСписок),

которое обращает списки. Например,

обращение( [a, b, c, d], [d, c, b, a] ).
*/

обращение([],[]).

обращение(L1,L):-
    обращение(L1,[],L).

обращение([],L,L).
обращение([H|T],L1,L):-
    обращение(T,[H|L1],L).


/*
3.5. Определите предикат

палиндром( Список).

Список называется палиндромом, если он читается одинаково,
как слева направо, так и справа налево.
Например, [м, а, д, а, м].
*/

палиндром([]).
палиндром([_]).

палиндром(L):-
    обращение(L,L).

/*
3.6. Определите отношение

сдвиг( Список1, Список2)

таким образом, чтобы Список2 представлял собой Список1, "циклически сдвинутый" влево на один символ. Например,

?- сдвиг( [1, 2, 3, 4, 5], L1),

 сдвиг1( LI, L2)

дает

L1 = [2, 3, 4, 5, 1]

L2 = [3, 4, 5, 1, 2]

*/

сдвиг([H|T],L):-
    конк(T,[H],L).    

/*
3.7. Определите отношение

перевод( Список1, Список2)
для перевода списка чисел от 0 до 9 в список соответствующих слов. Например,

перевод( [3, 5, 1, 3], [три, пять, один, три] )

Используйте в качестве вспомогательных следующие отношения:
означает( 0, нуль).
означает( 1, один).
означает( 2, два).
*/

означает( 0, нуль).
означает( 1, один).
означает( 2, два).
означает( 3, три).
означает( 4, четыре).
означает( 5, пять).


перевод([],[]).

перевод([H|T],[H1|L]):-
    означает(H,H1),
    перевод(T,L).

/*
3.8. Определите отношение

подмножество( Множество, Подмножество)

где Множество и Подмножество — два списка представляющие два множества.
Желательно иметь возможность использовать это отношение не только для 
проверки включения одного множества в другое, 
но и для порождения всех возможных подмножеств заданного множества. Например:

?-  подмножество( [а, b, с], S ).
*/

подмножество([],[]).
подмножество([H|T],[H|T1]):-
    подмножество(T,T1).

подмножество([H|T],T1):-
    подмножество(T,T1).


/*
3.9. Определите отношение
разбиениесписка( Список, Список1, Список2)
так, чтобы оно распределяло элементы списка между двумя списками Список1 и Список2
и чтобы эти списки были примерно одинаковой длины. Например:
разбиениесписка( [а, b, с, d, e], [a, с, e], [b, d]).
*/

разбиениесписка([],[],[]).
разбиениесписка([X],[X],[]).

разбиениесписка([X,Y|L],[X|L1],[Y|L2]):-
    разбиениесписка(L,L1,L2).
