
/*
Вариант 10
1. Напишите предикат all(+P, +L), который проверяет
"Для всех ли элементов списка L выполняетсяпредикат P? "

тест:

all(number,[]).
true. - не ясно, может - false?

all(number,[1,2,3,4]).
true.

all(number,[1,s,1,1]).
false

*/

all(_,[]).      % пустой список - граничный случай возвращает True.

all(P,[H|L]):-
    all(P,L),       % идем в цикл.
    apply(P,[H]).   % когда цикл дошел до конца, делаем проверку предиката P.

/*
2. Напишите предикат filter(+V, +P, -L) - истинный тогда и только тогда, 
когда список L есть список всех элементов из списка V,
удовлетворяющих предикату P ("фильтрация" списка).

тесты:

filter([],P,L).
L = [].

filter([1,2],number,L).
L = [1,2].

filter([1,a],number,L).
L = [1].

*/

filter([],_,[]).            % пустой исходный список - граничный случай возвращает []

filter(V,P,L):-             % рассширяем ф-ю  
    filter(V,P,[],L1),      % аккумулятором []
    реверс(L1,L).           % реверс результирующего списка (что бы по феншую)

filter([],_,L,L).           % граничный случай рассширенной ф-и.

filter([H|V],P,L1,L):-      % если елемент списка
    apply(P,[H]),           % удовлетворяет предикату
    filter(V,P,[H|L1],L).   % добавить эл-т. в аккумулятор

filter([H|V],P,L1,L):-      % если елемент списка
    \+(apply(P,[H])),       % не удовлетворяет предикату
    filter(V,P,L1,L).       % пропустить эл-т.


% вспомогательная функция - реверс списка.
реверс([],[]).

реверс(L1,L):-
    реверс(L1,[],L).

реверс([],L,L).

реверс([H|L1],L2,L):-
    реверс(L1,[H|L2],L).
